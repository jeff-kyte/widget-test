/**************** MIXINS ****************/

@mixin fsize-pad($size, $pad:null) {
    @if $size { font-size: $size; }
    @if $pad { padding: $pad; }
}
@mixin colors($foreG, $backG:null) {
    @if $foreG { color: $foreG; }
    @if $backG { background-color: $backG; }
}
@mixin flex-fam($dir:null, $just:null, $align:null, $wrap:null, $flow:null) {
    @if $dir { flex-direction:$dir; }
    @if $just { justify-content: $just; }
    @if $align { align-items: $align; }
    @if $wrap { flex-wrap:$wrap; }
    @if $flow { flex-flow:$flow; }
}
@mixin row-width($width, $margin:null) {
    @if $width { width: $width; }
    @if $margin { margin: $margin; }
    @else if $row-margin { margin: $row-margin; }
}
@mixin set-box-sizing($property) {
    -webkit-box-sizing: $property;
    box-sizing: $property;
}
@mixin column-size($flex:null, $basis:null) {
    @if $flex { flex:$flex; }
    @if $basis { flex-basis: $basis; }
}
@mixin media-query($size) { // Media query mixin
    // Assign $gp-break to benefit any global_extend() mixins included in @content
    // Idea from Hugo Giraudel https://gist.github.com/HugoGiraudel/9638030
    $gp-break: $size !global; 
    @media #{map-get($media_strings, $size)} { @content; }
    $gp-break: $gp-origin-break !global; // Reset $gp-break to default
}
// Print @content inside placeholder class for each media query, $extends optional list of classes:
@mixin global_placehold($plac_name, $extends:null) {
    @if not index($global_placeholds, $plac_name) { // If placeholder name is not in the list
        $global_placeholds: append($global_placeholds, $plac_name) !global; // Append placeholder name to the list
        @at-root { // Escape any selector nesting around mixin call
            @each $break_name, $break_string in $media_strings {
                @media #{$break_string} { // Create media query
                    // Create placeholder with -#{$break_name} extension (ie: "-small", "-medium", etc.):
                    %#{$plac_name}-#{$break_name} {
                        @content;
                        @if $extends {
                            @each $extend in $extends {
                                @extend %#{$extend}-#{$break_name} !optional;
                            }
                        }
                    }
                }
            }
        }
    } @else {
        @warn 'Placeholder "#{$plac_name}" already exists.';
    }
}
@mixin global_extend($plac_name) {
    // Extend placeholder name with -#{$gp-break} extension (ie: "-small", "-medium", etc.):
    @extend %#{$plac_name}-#{$gp-break} !optional;
}
@function build_media_strings() { // Construct media query strings from $breaks map
    $media_strings: (); // Map to return
    $break_num: 1; // Iteration count
    @each $break_name, $size in $breaks { // For each $name:$size pair in $breaks
        @if 1 < $break_num and $break_num < length($breaks) { // Excluding the first and last pair
            $next_size: nth(nth($breaks, $break_num + 1), 2); // Get $size of following breakpoint
            // Create new map value ($breakpoint_name:"media query string"):
            $new_media: ($break_name: 'all and (min-width:' + ($size + 1) + ') and (max-width:' + $next_size + ')');
            $media_strings: map-merge($media_strings, $new_media); // Append new map to return values
        } @else if $break_num == length($breaks) { // If this is the last $name:$size pair
            $new_media: ($break_name: 'all and (min-width:' + $size + ')'); // There is no max-width
            $media_strings: map-merge($media_strings, $new_media);
        } @else if $break_num == 1 { // If this is the first $name:$size pair
            $media_strings: map-merge($media_strings, ($break_name: 'all'));
        }
        $break_num: $break_num + 1;
    }
    @return $media_strings;
}
// Give each media query scope it's width and spacing placeholder class:
@mixin row_widths($spacing:null) {
    @each $break_name, $break_string in $media_strings {
        @media #{$break_string} {
            %width-#{$break_name} {
                @include row-width(map-get($breaks, $break_name), $spacing);
            }
        }
    }
}
